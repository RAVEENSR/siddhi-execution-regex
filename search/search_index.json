{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-execution-regex\n\n\nThe \nsiddhi-execution-regex extension\n is an extension to \nSiddhi\n that provides basic RegEx execution capabilities.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n4.1.2\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.execution.regex\n/groupId\n\n        \nartifactId\nsiddhi-execution-regex\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nfind\n \n(Function)\nThese methods attempt to find the subsequence of the 'inputSequence' that matches the given 'regex' pattern.\n\n\ngroup\n \n(Function)\nThis method returns the input subsequence captured by the given group during the previous match operation.\n\n\nlookingAt\n \n(Function)\nThis method attempts to match the 'inputSequence', from the beginning, against the 'regex' pattern.\n\n\nmatches\n \n(Function)\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#siddhi-execution-regex", 
            "text": "The  siddhi-execution-regex extension  is an extension to  Siddhi  that provides basic RegEx execution capabilities.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-execution-regex"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  4.1.2 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.execution.regex /groupId \n         artifactId siddhi-execution-regex /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "find   (Function) These methods attempt to find the subsequence of the 'inputSequence' that matches the given 'regex' pattern.  group   (Function) This method returns the input subsequence captured by the given group during the previous match operation.  lookingAt   (Function) This method attempts to match the 'inputSequence', from the beginning, against the 'regex' pattern.  matches   (Function) This method attempts to match the entire 'inputSequence' against the 'regex' pattern.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/4.1.2/", 
            "text": "API Docs - v4.1.2\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempt to find the subsequence of the 'inputSequence' that matches the given 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression that is matched to a sequence in order to find the subsequence of the same. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nThe starting index of the input sequence from where the input sequence ismatched with the given regex pattern. eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2. It returns true as a subsequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex  pattern, \\d\\d(.*)WSO2 . It returns 'false' as a subsequence does not exist.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2 starting from index 30. It returns 'true' since a subsequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input subsequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThe given group id of the regex expression. For example, 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into OutputStream;\n\n\n\n\n\nThis function returns 'WSO2 employees', the input subsequence captured within the given groupID, 3 after grouping the 'inputSequence' according to the regex pattern, \\d\\d(.*)(WSO2.*). \n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', from the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the 'inputSequence' against the regex pattern, \\d\\d(.*)(WSO2.*) from the beginning. Since it matches, the function returns 'true'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and it\ns a middleware company)\n\n\n\n\n\nThis method attempts to match the 'inputSequence' against the regex pattern, WSO2(.*)middleware(.*) from the beginning. Since it does not match, the function returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire 'inputSequence' against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns 'true'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire 'inputSequence' against WSO2(.*)middleware regex pattern. Since it does not match, it returns 'false'.", 
            "title": "4.1.2"
        }, 
        {
            "location": "/api/4.1.2/#api-docs-v412", 
            "text": "", 
            "title": "API Docs - v4.1.2"
        }, 
        {
            "location": "/api/4.1.2/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.1.2/#find-function", 
            "text": "These methods attempt to find the subsequence of the 'inputSequence' that matches the given 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression that is matched to a sequence in order to find the subsequence of the same. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         The starting index of the input sequence from where the input sequence ismatched with the given regex pattern. eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2. It returns true as a subsequence exists.  EXAMPLE 2  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex  pattern, \\d\\d(.*)WSO2 . It returns 'false' as a subsequence does not exist.  EXAMPLE 3  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2 starting from index 30. It returns 'true' since a subsequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.1.2/#group-function", 
            "text": "This method returns the input subsequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         The given group id of the regex expression. For example, 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into OutputStream;  This function returns 'WSO2 employees', the input subsequence captured within the given groupID, 3 after grouping the 'inputSequence' according to the regex pattern, \\d\\d(.*)(WSO2.*).", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.1.2/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', from the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the 'inputSequence' against the regex pattern, \\d\\d(.*)(WSO2.*) from the beginning. Since it matches, the function returns 'true'.  EXAMPLE 2  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and it s a middleware company)  This method attempts to match the 'inputSequence' against the regex pattern, WSO2(.*)middleware(.*) from the beginning. Since it does not match, the function returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.1.2/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire 'inputSequence' against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns 'true'.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire 'inputSequence' against WSO2(.*)middleware regex pattern. Since it does not match, it returns 'false'.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.1.1/", 
            "text": "API Docs - v4.1.1\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempt to find the subsequence of the 'inputSequence' that matches the given 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression that is matched to a sequence in order to find the subsequence of the same. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nThe starting index of the input sequence from where the input sequence ismatched with the given regex pattern. eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2. It returns true as a subsequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex  pattern, \\d\\d(.*)WSO2 . It returns 'false' as a subsequence does not exist.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2 starting from index 30. It returns 'true' since a subsequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input subsequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThe given group id of the regex expression. For example, 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into OutputStream;\n\n\n\n\n\nThis function returns 'WSO2 employees', the input subsequence captured within the given groupID, 3 after grouping the 'inputSequence' according to the regex pattern, \\d\\d(.*)(WSO2.*). \n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', from the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the 'inputSequence' against the regex pattern, \\d\\d(.*)(WSO2.*) from the beginning. Since it matches, the function returns 'true'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and it\ns a middleware company)\n\n\n\n\n\nThis method attempts to match the 'inputSequence' against the regex pattern, WSO2(.*)middleware(.*) from the beginning. Since it does not match, the function returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire 'inputSequence' against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns 'true'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire 'inputSequence' against WSO2(.*)middleware regex pattern. Since it does not match, it returns 'false'.", 
            "title": "4.1.1"
        }, 
        {
            "location": "/api/4.1.1/#api-docs-v411", 
            "text": "", 
            "title": "API Docs - v4.1.1"
        }, 
        {
            "location": "/api/4.1.1/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.1.1/#find-function", 
            "text": "These methods attempt to find the subsequence of the 'inputSequence' that matches the given 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression that is matched to a sequence in order to find the subsequence of the same. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         The starting index of the input sequence from where the input sequence ismatched with the given regex pattern. eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2. It returns true as a subsequence exists.  EXAMPLE 2  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex  pattern, \\d\\d(.*)WSO2 . It returns 'false' as a subsequence does not exist.  EXAMPLE 3  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2 starting from index 30. It returns 'true' since a subsequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.1.1/#group-function", 
            "text": "This method returns the input subsequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         The given group id of the regex expression. For example, 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into OutputStream;  This function returns 'WSO2 employees', the input subsequence captured within the given groupID, 3 after grouping the 'inputSequence' according to the regex pattern, \\d\\d(.*)(WSO2.*).", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.1.1/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', from the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the 'inputSequence' against the regex pattern, \\d\\d(.*)(WSO2.*) from the beginning. Since it matches, the function returns 'true'.  EXAMPLE 2  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and it s a middleware company)  This method attempts to match the 'inputSequence' against the regex pattern, WSO2(.*)middleware(.*) from the beginning. Since it does not match, the function returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.1.1/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire 'inputSequence' against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns 'true'.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire 'inputSequence' against WSO2(.*)middleware regex pattern. Since it does not match, it returns 'false'.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.1.0/", 
            "text": "API Docs - v4.1.0\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempt to find the subsequence of the 'inputSequence' that matches the given 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression that is matched to a sequence in order to find the subsequence of the same. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nThe starting index of the input sequence from where the input sequence ismatched with the given regex pattern. eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2. It returns true as a subsequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex  pattern, \\d\\d(.*)WSO2 . It returns 'false' as a subsequence does not exist.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2 starting from index 30. It returns 'true' since a subsequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input subsequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThe given group id of the regex expression. For example, 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into OutputStream;\n\n\n\n\n\nThis function returns 'WSO2 employees', the input subsequence captured within the given groupID, 3 after grouping the 'inputSequence' according to the regex pattern, \\d\\d(.*)(WSO2.*). \n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', from the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the 'inputSequence' against the regex pattern, \\d\\d(.*)(WSO2.*) from the beginning. Since it matches, the function returns 'true'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and it\ns a middleware company)\n\n\n\n\n\nThis method attempts to match the 'inputSequence' against the regex pattern, WSO2(.*)middleware(.*) from the beginning. Since it does not match, the function returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire 'inputSequence' against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns 'true'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire 'inputSequence' against WSO2(.*)middleware regex pattern. Since it does not match, it returns 'false'.", 
            "title": "4.1.0"
        }, 
        {
            "location": "/api/4.1.0/#api-docs-v410", 
            "text": "", 
            "title": "API Docs - v4.1.0"
        }, 
        {
            "location": "/api/4.1.0/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.1.0/#find-function", 
            "text": "These methods attempt to find the subsequence of the 'inputSequence' that matches the given 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression that is matched to a sequence in order to find the subsequence of the same. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         The starting index of the input sequence from where the input sequence ismatched with the given regex pattern. eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2. It returns true as a subsequence exists.  EXAMPLE 2  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex  pattern, \\d\\d(.*)WSO2 . It returns 'false' as a subsequence does not exist.  EXAMPLE 3  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2 starting from index 30. It returns 'true' since a subsequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.1.0/#group-function", 
            "text": "This method returns the input subsequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         The given group id of the regex expression. For example, 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into OutputStream;  This function returns 'WSO2 employees', the input subsequence captured within the given groupID, 3 after grouping the 'inputSequence' according to the regex pattern, \\d\\d(.*)(WSO2.*).", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.1.0/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', from the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the 'inputSequence' against the regex pattern, \\d\\d(.*)(WSO2.*) from the beginning. Since it matches, the function returns 'true'.  EXAMPLE 2  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and it s a middleware company)  This method attempts to match the 'inputSequence' against the regex pattern, WSO2(.*)middleware(.*) from the beginning. Since it does not match, the function returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.1.0/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire 'inputSequence' against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns 'true'.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire 'inputSequence' against WSO2(.*)middleware regex pattern. Since it does not match, it returns 'false'.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.0.16/", 
            "text": "API Docs - v4.0.16\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempt to find the subsequence of the 'inputSequence' that matches the given 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression that is matched to a sequence in order to find the subsequence of the same. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nThe starting index of the input sequence from where the input sequence ismatched with the given regex pattern. eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2. It returns true as a subsequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex  pattern, \\d\\d(.*)WSO2 . It returns 'false' as a subsequence does not exist.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2 starting from index 30. It returns 'true' since a subsequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input subsequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThe given group id of the regex expression. For example, 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into OutputStream;\n\n\n\n\n\nThis function returns 'WSO2 employees', the input subsequence captured within the given groupID, 3 after grouping the 'inputSequence' according to the regex pattern, \\d\\d(.*)(WSO2.*). \n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', from the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the 'inputSequence' against the regex pattern, \\d\\d(.*)(WSO2.*) from the beginning. Since it matches, the function returns 'true'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and it\ns a middleware company)\n\n\n\n\n\nThis method attempts to match the 'inputSequence' against the regex pattern, WSO2(.*)middleware(.*) from the beginning. Since it does not match, the function returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire 'inputSequence' against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns 'true'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire 'inputSequence' against WSO2(.*)middleware regex pattern. Since it does not match, it returns 'false'.", 
            "title": "4.0.16"
        }, 
        {
            "location": "/api/4.0.16/#api-docs-v4016", 
            "text": "", 
            "title": "API Docs - v4.0.16"
        }, 
        {
            "location": "/api/4.0.16/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.0.16/#find-function", 
            "text": "These methods attempt to find the subsequence of the 'inputSequence' that matches the given 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression that is matched to a sequence in order to find the subsequence of the same. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         The starting index of the input sequence from where the input sequence ismatched with the given regex pattern. eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2. It returns true as a subsequence exists.  EXAMPLE 2  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex  pattern, \\d\\d(.*)WSO2 . It returns 'false' as a subsequence does not exist.  EXAMPLE 3  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2 starting from index 30. It returns 'true' since a subsequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.0.16/#group-function", 
            "text": "This method returns the input subsequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         The given group id of the regex expression. For example, 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into OutputStream;  This function returns 'WSO2 employees', the input subsequence captured within the given groupID, 3 after grouping the 'inputSequence' according to the regex pattern, \\d\\d(.*)(WSO2.*).", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.0.16/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', from the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the 'inputSequence' against the regex pattern, \\d\\d(.*)(WSO2.*) from the beginning. Since it matches, the function returns 'true'.  EXAMPLE 2  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and it s a middleware company)  This method attempts to match the 'inputSequence' against the regex pattern, WSO2(.*)middleware(.*) from the beginning. Since it does not match, the function returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.0.16/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire 'inputSequence' against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns 'true'.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire 'inputSequence' against WSO2(.*)middleware regex pattern. Since it does not match, it returns 'false'.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.0.15/", 
            "text": "API Docs - v4.0.15\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nstarting index of the input sequence to start matching the given regex pattern eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.\n\n\n\nEXAMPLE 3\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input sub-sequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nthe given group id of the regex expression eg: 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;\n\n\n\n\n\nReturns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.\n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "4.0.15"
        }, 
        {
            "location": "/api/4.0.15/#api-docs-v4015", 
            "text": "", 
            "title": "API Docs - v4.0.15"
        }, 
        {
            "location": "/api/4.0.15/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.0.15/#find-function", 
            "text": "These methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         starting index of the input sequence to start matching the given regex pattern eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.  EXAMPLE 3  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.0.15/#group-function", 
            "text": "This method returns the input sub-sequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         the given group id of the regex expression eg: 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;  Returns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.0.15/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)  This method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.0.15/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.0.14/", 
            "text": "API Docs - v4.0.14\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nstarting index of the input sequence to start matching the given regex pattern eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.\n\n\n\nEXAMPLE 3\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input sub-sequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nthe given group id of the regex expression eg: 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;\n\n\n\n\n\nReturns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.\n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "4.0.14"
        }, 
        {
            "location": "/api/4.0.14/#api-docs-v4014", 
            "text": "", 
            "title": "API Docs - v4.0.14"
        }, 
        {
            "location": "/api/4.0.14/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.0.14/#find-function", 
            "text": "These methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         starting index of the input sequence to start matching the given regex pattern eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.  EXAMPLE 3  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.0.14/#group-function", 
            "text": "This method returns the input sub-sequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         the given group id of the regex expression eg: 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;  Returns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.0.14/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)  This method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.0.14/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.0.13/", 
            "text": "API Docs - v4.0.13\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nstarting index of the input sequence to start matching the given regex pattern eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.\n\n\n\nEXAMPLE 3\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input sub-sequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nthe given group id of the regex expression eg: 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;\n\n\n\n\n\nReturns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.\n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "4.0.13"
        }, 
        {
            "location": "/api/4.0.13/#api-docs-v4013", 
            "text": "", 
            "title": "API Docs - v4.0.13"
        }, 
        {
            "location": "/api/4.0.13/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.0.13/#find-function", 
            "text": "These methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         starting index of the input sequence to start matching the given regex pattern eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.  EXAMPLE 3  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.0.13/#group-function", 
            "text": "This method returns the input sub-sequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         the given group id of the regex expression eg: 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;  Returns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.0.13/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)  This method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.0.13/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.0.12/", 
            "text": "API Docs - v4.0.12\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nstarting index of the input sequence to start matching the given regex pattern eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.\n\n\n\nEXAMPLE 3\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input sub-sequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nthe given group id of the regex expression eg: 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;\n\n\n\n\n\nReturns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.\n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#api-docs-v4012", 
            "text": "", 
            "title": "API Docs - v4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.0.12/#find-function", 
            "text": "These methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         starting index of the input sequence to start matching the given regex pattern eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.  EXAMPLE 3  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.0.12/#group-function", 
            "text": "This method returns the input sub-sequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         the given group id of the regex expression eg: 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;  Returns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.0.12/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)  This method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.0.12/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.0.11/", 
            "text": "API Docs - v4.0.11\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nstarting index of the input sequence to start matching the given regex pattern eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.\n\n\n\nEXAMPLE 3\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input sub-sequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nthe given group id of the regex expression eg: 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;\n\n\n\n\n\nReturns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.\n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#api-docs-v4011", 
            "text": "", 
            "title": "API Docs - v4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.0.11/#find-function", 
            "text": "These methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         starting index of the input sequence to start matching the given regex pattern eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.  EXAMPLE 3  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.0.11/#group-function", 
            "text": "This method returns the input sub-sequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         the given group id of the regex expression eg: 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;  Returns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.0.11/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)  This method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.0.11/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.0.10/", 
            "text": "API Docs - v4.0.10\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nstarting index of the input sequence to start matching the given regex pattern eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.\n\n\n\nEXAMPLE 3\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input sub-sequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nthe given group id of the regex expression eg: 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;\n\n\n\n\n\nReturns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.\n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#api-docs-v4010", 
            "text": "", 
            "title": "API Docs - v4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.0.10/#find-function", 
            "text": "These methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         starting index of the input sequence to start matching the given regex pattern eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.  EXAMPLE 3  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.0.10/#group-function", 
            "text": "This method returns the input sub-sequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         the given group id of the regex expression eg: 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;  Returns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.0.10/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)  This method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.0.10/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.0.9/", 
            "text": "API Docs - v4.0.9\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nstarting index of the input sequence to start matching the given regex pattern eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.\n\n\n\nEXAMPLE 3\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input sub-sequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nthe given group id of the regex expression eg: 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;\n\n\n\n\n\nReturns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.\n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#api-docs-v409", 
            "text": "", 
            "title": "API Docs - v4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.0.9/#find-function", 
            "text": "These methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         starting index of the input sequence to start matching the given regex pattern eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.  EXAMPLE 3  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.0.9/#group-function", 
            "text": "This method returns the input sub-sequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         the given group id of the regex expression eg: 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;  Returns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.0.9/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)  This method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.0.9/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.0.8/", 
            "text": "API Docs - v4.0.8\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nstarting index of the input sequence to start matching the given regex pattern eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.\n\n\n\nEXAMPLE 3\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input sub-sequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nthe given group id of the regex expression eg: 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;\n\n\n\n\n\nReturns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.\n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "4.0.8"
        }, 
        {
            "location": "/api/4.0.8/#api-docs-v408", 
            "text": "", 
            "title": "API Docs - v4.0.8"
        }, 
        {
            "location": "/api/4.0.8/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.0.8/#find-function", 
            "text": "These methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         starting index of the input sequence to start matching the given regex pattern eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.  EXAMPLE 3  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.0.8/#group-function", 
            "text": "This method returns the input sub-sequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         the given group id of the regex expression eg: 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;  Returns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.0.8/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)  This method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.0.8/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.0.7/", 
            "text": "API Docs - v4.0.7\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nstarting index of the input sequence to start matching the given regex pattern eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.\n\n\n\nEXAMPLE 3\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input sub-sequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nthe given group id of the regex expression eg: 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;\n\n\n\n\n\nReturns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.\n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "4.0.7"
        }, 
        {
            "location": "/api/4.0.7/#api-docs-v407", 
            "text": "", 
            "title": "API Docs - v4.0.7"
        }, 
        {
            "location": "/api/4.0.7/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.0.7/#find-function", 
            "text": "These methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         starting index of the input sequence to start matching the given regex pattern eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.  EXAMPLE 3  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.0.7/#group-function", 
            "text": "This method returns the input sub-sequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         the given group id of the regex expression eg: 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;  Returns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.0.7/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)  This method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.0.7/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.0.6/", 
            "text": "API Docs - v4.0.6\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nstarting index of the input sequence to start matching the given regex pattern eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.\n\n\n\nEXAMPLE 3\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input sub-sequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nthe given group id of the regex expression eg: 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;\n\n\n\n\n\nReturns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.\n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "4.0.6"
        }, 
        {
            "location": "/api/4.0.6/#api-docs-v406", 
            "text": "", 
            "title": "API Docs - v4.0.6"
        }, 
        {
            "location": "/api/4.0.6/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.0.6/#find-function", 
            "text": "These methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         starting index of the input sequence to start matching the given regex pattern eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.  EXAMPLE 3  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.0.6/#group-function", 
            "text": "This method returns the input sub-sequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         the given group id of the regex expression eg: 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;  Returns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/4.0.6/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)  This method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.0.6/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.0.5/", 
            "text": "API Docs - v4.0.5\n\n\nRegex\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.\n\n\n\nfind \n(Function)\n\n\nThese methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nstarting index of the input sequence to start matching the given regex pattern eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.\n\n\n\nEXAMPLE 3\n\n\ndefine stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;\n\n\n\n\n\nThis method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input sub-sequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nregular expression. eg: \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \ninput sequence to be matched with the regular expression eg: 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nthe given group id of the regex expression eg: 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;\n\n\n\n\n\nReturns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.", 
            "title": "4.0.5"
        }, 
        {
            "location": "/api/4.0.5/#api-docs-v405", 
            "text": "", 
            "title": "API Docs - v4.0.5"
        }, 
        {
            "location": "/api/4.0.5/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/4.0.5/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', starting at the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the inputSequence against \\d\\d(.*)(WSO2.*) regex pattern starting at the beginning. Since it matches, returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and its a middleware company)  This method attempts to match the inputSequence against WSO2(.*)middleware(.*) regex pattern starting at the beginning. Since it does not match, returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/4.0.5/#find-function", 
            "text": "These methods attempts to find the next sub-sequence of the 'inputSequence' that matches the 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         starting index of the input sequence to start matching the given regex pattern eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns true as the sub sequence exists.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern. It returns false as the sub sequence does not exists.  EXAMPLE 3  define stream inputStream (inputSequence string, price long, regex string);\n\nfrom inputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into outputStream;  This method attempts to find the next sub-sequence of the inputSequence that matches \\d\\d(.*)WSO2 regex  pattern starting from index 30. It returns true since such a sub sequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/4.0.5/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns true.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire inputSequence against WSO2(.*)middleware regex pattern. Since it does not match, it returns false.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/api/4.0.5/#group-function", 
            "text": "This method returns the input sub-sequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         regular expression. eg: \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         input sequence to be matched with the regular expression eg: 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         the given group id of the regex expression eg: 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into outputStream;  Returns 'WSO2 employees', input sub-sequence captured by the given groupID, 3 during the previous match operation.", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v4.1.2\n\n\nRegex\n\n\nfind \n(Function)\n\n\nThese methods attempt to find the subsequence of the 'inputSequence' that matches the given 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:find(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n starting.index)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression that is matched to a sequence in order to find the subsequence of the same. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstarting.index\n\n        \nThe starting index of the input sequence from where the input sequence ismatched with the given regex pattern. eg: 1, 2.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2. It returns true as a subsequence exists.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex  pattern, \\d\\d(.*)WSO2 . It returns 'false' as a subsequence does not exist.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into OutputStream;\n\n\n\n\n\nThis method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2 starting from index 30. It returns 'true' since a subsequence exists.\n\n\n\ngroup \n(Function)\n\n\nThis method returns the input subsequence captured by the given group during the previous match operation.\n\n\n\nSyntax\n\n\nSTRING\n regex:group(\nSTRING\n regex, \nSTRING\n input.sequence, \nINT\n group.id)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ngroup.id\n\n        \nThe given group id of the regex expression. For example, 0, 1, 2, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into OutputStream;\n\n\n\n\n\nThis function returns 'WSO2 employees', the input subsequence captured within the given groupID, 3 after grouping the 'inputSequence' according to the regex pattern, \\d\\d(.*)(WSO2.*). \n\n\n\nlookingAt \n(Function)\n\n\nThis method attempts to match the 'inputSequence', from the beginning, against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:lookingAt(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)\n\n\n\n\n\nThis method attempts to match the 'inputSequence' against the regex pattern, \\d\\d(.*)(WSO2.*) from the beginning. Since it matches, the function returns 'true'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and it\ns a middleware company)\n\n\n\n\n\nThis method attempts to match the 'inputSequence' against the regex pattern, WSO2(.*)middleware(.*) from the beginning. Since it does not match, the function returns false.\n\n\n\nmatches \n(Function)\n\n\nThis method attempts to match the entire 'inputSequence' against the 'regex' pattern.\n\n\n\nSyntax\n\n\nBOOL\n regex:matches(\nSTRING\n regex, \nSTRING\n input.sequence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex\n\n        \nA regular expression. For example, \\d\\d(.*)WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.sequence\n\n        \nThe input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire 'inputSequence' against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns 'true'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)\n\n\n\n\n\nThis method attempts to match the entire 'inputSequence' against WSO2(.*)middleware regex pattern. Since it does not match, it returns 'false'.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v412", 
            "text": "", 
            "title": "API Docs - v4.1.2"
        }, 
        {
            "location": "/api/latest/#regex", 
            "text": "", 
            "title": "Regex"
        }, 
        {
            "location": "/api/latest/#find-function", 
            "text": "These methods attempt to find the subsequence of the 'inputSequence' that matches the given 'regex' pattern.  Syntax  BOOL  regex:find( STRING  regex,  STRING  input.sequence,  INT  starting.index)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression that is matched to a sequence in order to find the subsequence of the same. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         starting.index \n         The starting index of the input sequence from where the input sequence ismatched with the given regex pattern. eg: 1, 2. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced by WSO2 currently) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2. It returns true as a subsequence exists.  EXAMPLE 2  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced currently) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex  pattern, \\d\\d(.*)WSO2 . It returns 'false' as a subsequence does not exist.  EXAMPLE 3  define stream InputStream (inputSequence string, price long, regex string);\n\nfrom InputStream select inputSequence , regex:find(\\d\\d(.*)WSO2, 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 30) as aboutWSO2 insert into OutputStream;  This method attempts to find the subsequence of the 'inputSequence' that matches the regex pattern, \\d\\d(.*)WSO2 starting from index 30. It returns 'true' since a subsequence exists.", 
            "title": "find (Function)"
        }, 
        {
            "location": "/api/latest/#group-function", 
            "text": "This method returns the input subsequence captured by the given group during the previous match operation.  Syntax  STRING  regex:group( STRING  regex,  STRING  input.sequence,  INT  group.id)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         group.id \n         The given group id of the regex expression. For example, 0, 1, 2, etc. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:group(\\d\\d(.*)(WSO2.*), 21 products are produced within 10 years by WSO2 currently by WSO2 employees, 3) \n insert into OutputStream;  This function returns 'WSO2 employees', the input subsequence captured within the given groupID, 3 after grouping the 'inputSequence' according to the regex pattern, \\d\\d(.*)(WSO2.*).", 
            "title": "group (Function)"
        }, 
        {
            "location": "/api/latest/#lookingat-function", 
            "text": "This method attempts to match the 'inputSequence', from the beginning, against the 'regex' pattern.  Syntax  BOOL  regex:lookingAt( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(\\d\\d(.*)(WSO2.*), 21 products are produced by WSO2 currently in Sri Lanka)  This method attempts to match the 'inputSequence' against the regex pattern, \\d\\d(.*)(WSO2.*) from the beginning. Since it matches, the function returns 'true'.  EXAMPLE 2  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:lookingAt(WSO2(.*)middleware(.*), sample test string and WSO2 is situated in trace and it s a middleware company)  This method attempts to match the 'inputSequence' against the regex pattern, WSO2(.*)middleware(.*) from the beginning. Since it does not match, the function returns false.", 
            "title": "lookingAt (Function)"
        }, 
        {
            "location": "/api/latest/#matches-function", 
            "text": "This method attempts to match the entire 'inputSequence' against the 'regex' pattern.  Syntax  BOOL  regex:matches( STRING  regex,  STRING  input.sequence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex \n         A regular expression. For example, \\d\\d(.*)WSO2. \n         \n         STRING \n         No \n         No \n     \n     \n         input.sequence \n         The input sequence to be matched with the regular expression. For example, 21 products are produced by WSO2. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (inputSequence string, price long, regex string, group int);\n\nfrom InputStream select inputSequence, regex:matches(WSO2(.*)middleware(.*), WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire 'inputSequence' against WSO2(.*)middleware(.*) regex pattern. Since it matches, it returns 'true'.  EXAMPLE 2  define stream inputStream (inputSequence string, price long, regex string, group int);\n\nfrom inputStream select inputSequence, regex:matches(WSO2(.*)middleware, WSO2 is situated in trace and its a middleware company)  This method attempts to match the entire 'inputSequence' against WSO2(.*)middleware regex pattern. Since it does not match, it returns 'false'.", 
            "title": "matches (Function)"
        }, 
        {
            "location": "/LICENSE/", 
            "text": "Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n\n\n\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n\n\n\n\n\nDefinitions.\n\n\n\"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\n\n\"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\n\n\"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\n\n\"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\n\n\"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\n\n\"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\n\n\"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\n\n\"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n\n\n\n\n\nGrant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n\n\n\n\n\nGrant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n\n\n\n\n\nRedistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n\n(a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n\n\n(b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n\n\n(c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n\n\n(d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\n\n\nYou may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n\n\n\n\n\nSubmission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n\n\n\n\n\nTrademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n\n\n\n\n\nDisclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n\n\n\n\n\nLimitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n\n\n\n\n\nAccepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n\n\n\n\n\nEND OF TERMS AND CONDITIONS\n\n\nAPPENDIX: How to apply the Apache License to your work.\n\n\n  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \n{}\n\n  replaced with your own identifying information. (Don\nt include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \nprinted page\n as the copyright notice for easier\n  identification within third-party archives.\n\n\n\n\n\nCopyright {yyyy} {name of copyright owner}\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n\n\n\n\nUnless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.", 
            "title": "License"
        }
    ]
}